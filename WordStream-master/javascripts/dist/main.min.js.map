{"version":3,"sources":["main.js"],"names":["opacity","xGridlinesGroup","svg","spinner","d3","select","append","attr","id","width","height","fileList","initialDataset","categories","legendGroup","addDatasetsOptions","mainGroup","opt","el","document","createElement","textContent","i","length","value","appendChild","getElementById","fileName","loadData","lines","speed","Spinner","color","radius","trail","spin","target","indexOf","loadBlogPostData","draw","initTop","checked","loadAuthorData","loadQuantumComputing","loadNewData","event","remove","selectAll","axisGroup","this","options","selectedIndex","text","data","legendHeight","margins","globalWidth","right","globalHeight","bottom","layout","wordStream","size","fontScale","scale","minFontSize","maxFontSize","flag","globalFlag","maxFreq","minSud","ws","transition","duration","d","y0","y","dates","area","x","push","date","xAxis","axis","styleAxis","axisNodes","gridlineNodes","styleGridlineNodes","row","xAxisScale","ordinal","domain","rangeBands","lineCardinal","line","call","xGridlineScale","boxes","layers","range","tempPoint","Object","assign","boundary","xGridlinesAxis","tickSize","tickFormat","tempPoint2","lenb","interpolate","topics","curve","exit","enter","stroke","slice","substring","layerPath","allWords","combined","forEach","fill-opacity","stroke-opacity","lineScale","threshold","isRel","links","sourceID","visibleLinks","s","find","topic","style","undefined","sourceY","targetX","targetY","weight","targetID","drawWords","prevColor","texts","fontSize","visibility","transform","rotate","sourceText","prevTargetColor","targetText","prevSourceColor","class","font-family","font-size","fill","sudden","placed","thisText","on","allTexts","thisLink","__data__","stroke-width","streamLayer","elm","points","thePoint","clonedNode","cloneNode","clonedParentNode","parentNode","filter","t","cloned","wordStreamG","allOtherTexts","Array","querySelectorAll","timeStep","streamHeight","legendNodes","legendFontSize","stroke-size","datum","node","removeChild","r","alignment-baseline","dx","stop","map","opacScale","linear","extent","allW","JSON","parse","stringify","connection","log","json","error","rawLinks","split","join","w","sourceX","x1","y1","x2","y2"],"mappings":"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","file":"main.min.js","sourcesContent":["// var fileList = [\"WikiNews\",\"Huffington\",\"CrooksAndLiars\",\"EmptyWheel\",\"Esquire\",\"FactCheck\"\n//                 ,\"VIS_papers\",\"IMDB\",\"PopCha\",\"Cards_PC\",\"Cards_Fries\"]\nvar svg = d3.select(\"body\").append('svg')\n    .attr({\n        id: \"mainsvg\",\n        width: 1400,\n        height: 660\n    });\n    var fileList = [\"WikiNews\", \"Huffington\", \"CrooksAndLiars\", \"EmptyWheel\", \"Esquire\", \"FactCheck\", \"VIS_papers\", \"IMDB\", \"PopCha\", \"Cards_PC\", \"Cards_Fries\", \"QuantumComputing\",\"test\"]\n\nvar initialDataset = \"EmptyWheel\";\nvar categories = [\"person\", \"location\", \"organization\", \"miscellaneous\"];\n\nvar fileName;\n\nvar opacity, layerPath, maxFreq;\n\nvar axisGroup = svg.append('g').attr(\"id\", \"axisGroup\");\nvar xGridlinesGroup = svg.append('g').attr(\"id\", \"xGridlinesGroup\");\nvar mainGroup = svg.append('g').attr(\"id\", \"main\");\nvar legendGroup = svg.append('g').attr(\"id\", \"legend\");\n\naddDatasetsOptions();\n\nfunction addDatasetsOptions() {\n    var select = document.getElementById(\"datasetsSelect\");\n    for (var i = 0; i < fileList.length; i++) {\n        var opt = fileList[i];\n        var el = document.createElement(\"option\");\n        el.textContent = opt;\n        el.value = opt;\n        el[\"data-image\"] = \"images2/datasetThumnails/\" + fileList[i] + \".png\";\n        select.appendChild(el);\n    }\n    document.getElementById('datasetsSelect').value = initialDataset;  //************************************************\n    fileName = document.getElementById(\"datasetsSelect\").value;\n    loadData();\n}\n\nvar spinner;\n\nfunction loadData() {\n    // START: loader spinner settings ****************************\n    var opts = {\n        lines: 25, // The number of lines to draw\n        length: 15, // The length of each line\n        width: 5, // The line thickness\n        radius: 25, // The radius of the inner circle\n        color: '#000', // #rgb or #rrggbb or array of colors\n        speed: 2, // Rounds per second\n        trail: 50, // Afterglow percentage\n        className: 'spinner', // The CSS class to assign to the spinner\n    };\n    var target = document.getElementById('loadingSpinner');\n    spinner = new Spinner(opts).spin(target);\n    // END: loader spinner settings ****************************\n    fileName = \"data/\" + fileName + \".tsv\"; // Add data folder path\n    if (fileName.indexOf(\"test\") >= 0) {\n        categories = [\"content\"];\n        loadBlogPostData(draw, initTop);\n        document.getElementById(\"rel\").checked = true;\n    }    \n    else if (fileName.indexOf(\"Cards_Fries\") >= 0) {\n        categories = [\"increases_activity\", \"decreases_activity\"];\n        loadAuthorData(draw, initTop);\n    }\n    else if (fileName.indexOf(\"Cards_PC\") >= 0) {\n        categories = [\"adds_modification\", \"removes_modification\", \"increases\", \"decreases\", \"binds\", \"translocation\"];\n        loadAuthorData(draw, initTop);\n    }\n    else if (fileName.indexOf(\"PopCha\") >= 0) {\n        categories = [\"Comedy\", \"Drama\", \"Action\", \"Fantasy\", \"Horror\"];\n        loadAuthorData(draw, initTop);\n    }\n    else if (fileName.indexOf(\"IMDB\") >= 0) {\n        categories = [\"Comedy\", \"Drama\", \"Action\", \"Family\"];\n        loadAuthorData(draw, initTop);\n    }\n    else if (fileName.indexOf(\"VIS\") >= 0) {\n        categories = [\"Vis\", \"VAST\", \"InfoVis\", \"SciVis\"];\n        loadAuthorData(draw, initTop);\n    }\n    else if (fileName.indexOf(\"QuantumComputing\") >= 0) {\n        fileName = \"data/\" + fileName + \".tsv\"; // Add data folder path\n        categories = [\"Unknown citation\", \"Have citation\", \"Affiliations\", \"Author\"];\n        initTop = 15;\n        loadQuantumComputing(draw, initTop);\n    }\n    else if (fileName.indexOf(\"Huffington\") >= 0) {\n        categories = [\"person\", \"location\", \"organization\", \"miscellaneous\"];\n        loadBlogPostData(draw, initTop);\n        document.getElementById(\"rel\").checked = true;\n    }\n    else {\n        categories = [\"person\", \"location\", \"organization\", \"miscellaneous\"];\n        loadBlogPostData(draw, initTop);\n    }\n}\n\nfunction loadNewData(event) {\n    legendGroup.selectAll(\"*\").remove();\n    axisGroup.selectAll(\"*\").remove();\n    xGridlinesGroup.selectAll(\"*\").remove();\n    mainGroup.selectAll(\"*\").remove();\n\n    fileName = this.options[this.selectedIndex].text;\n    document.getElementById(\"rel\").checked = false;\n    loadData();\n}\n\nfunction draw(data) {\n    //Layout data\n    var font = \"Arial\";\n    var interpolation = \"cardinal\";\n    const axisPadding = 10;\n    const legendFontSize = 12;\n    const legendOffset = 10;\n    var legendHeight = categories.length * legendFontSize;\n\n    const margins = {left: 20, top: 20, right: 10, bottom: 30};\n    var width = globalWidth - (margins.left + margins.top);\n    var height = globalHeight - (+margins.top + margins.bottom + axisPadding + legendHeight);\n    var ws = d3.layout.wordStream()\n            .size([width, height])\n            .fontScale(d3.scale.linear())\n            .minFontSize(globalMinFont)\n            .maxFontSize(globalMaxFont)\n            .data(data)\n            .flag(globalFlag)\n        // .font(font)\n        // .interpolate(interpolation)\n        // .fontScale(d3.scale.linear())\n    ;\n    var boxes = ws.boxes();\n    var minSud = ws.minSud();\n    var maxSud = ws.maxSud();\n    maxFreq = ws.maxFreq();\n\n    //set svg data.\n    svg\n        .transition()\n        .duration(300)\n        .attr({\n            width: globalWidth,\n            height: globalHeight,\n        });\n\n    var area = d3.svg.area()\n        .interpolate(interpolation)\n        .x(function (d) {\n            return (d.x);\n        })\n        .y0(function (d) {\n            return d.y0;\n        })\n        .y1(function (d) {\n            return (d.y0 + d.y);\n        });\n\n    //Display time axes\n    var dates = [];\n    boxes.data.forEach(row => {\n        dates.push(row.date);\n    });\n\n    var xAxisScale = d3.scale.ordinal().domain(dates).rangeBands([0, width]);\n    var xAxis = d3.svg.axis().orient('bottom').scale(xAxisScale);\n\n    axisGroup.attr('transform', 'translate(' + (margins.left) + ',' + (height + margins.top + axisPadding + legendHeight) + ')');\n    var axisNodes = axisGroup.call(xAxis);\n    styleAxis(axisNodes);\n\n    //Display the vertical gridline\n    var xGridlineScale = d3.scale.ordinal().domain(d3.range(0, dates.length + 1)).rangeBands([0, width + width / boxes.data.length]);\n    var xGridlinesAxis = d3.svg.axis().orient('bottom').scale(xGridlineScale);\n\n    xGridlinesGroup.attr('transform', 'translate(' + (margins.left - width / boxes.data.length / 2) + ',' + (height + margins.top + axisPadding + legendHeight + margins.bottom) + ')');\n    var gridlineNodes = xGridlinesGroup.call(xGridlinesAxis.tickSize(-height - axisPadding - legendHeight - margins.bottom, 0, 0).tickFormat(''));\n    styleGridlineNodes(gridlineNodes);\n\n    //Main group\n    mainGroup.attr('transform', 'translate(' + margins.left + ',' + margins.top + ')');\n    var wordStreamG = mainGroup.append('g').attr(\"id\", \"wordStreamG\");\n\n// =============== Get BOUNDARY and LAYERPATH ===============\n    const lineCardinal = d3.svg.line()\n        .x(function (d) {\n            return d.x;\n        })\n        .y(function (d) {\n            return d.y;\n        })\n        .interpolate(\"cardinal\");\n\n    var boundary = [];\n    for (var i = 0; i < boxes.layers[0].length; i++) {\n        var tempPoint = Object.assign({}, boxes.layers[0][i]);\n        tempPoint.y = tempPoint.y0;\n        boundary.push(tempPoint);\n    }\n\n    for (var i = boxes.layers[boxes.layers.length - 1].length - 1; i >= 0; i--) {\n        var tempPoint2 = Object.assign({}, boxes.layers[boxes.layers.length - 1][i]);\n        tempPoint2.y = tempPoint2.y + tempPoint2.y0;\n        boundary.push(tempPoint2);\n    }       // Add next (8) elements\n\n    var lenb = boundary.length;\n\n    // Get the string for path\n\n    var combined = lineCardinal(boundary.slice(0, lenb / 2))\n        + \"L\"\n        + lineCardinal(boundary.slice(lenb / 2, lenb))\n            .substring(1, lineCardinal(boundary.slice(lenb / 2, lenb)).length)\n        + \"Z\";\n    // ============= Get LAYER PATH ==============\n\n    layerPath = mainGroup.append(\"path\")\n        .attr(\"d\", combined)\n        .attr(\"visibility\", \"hidden\")\n        .attr(\"class\", \"layerpath\")\n        .attr({\n            'fill-opacity': 1,\n            'stroke-opacity': 0,\n        });\n    // draw curves\n    var topics = boxes.topics;\n\n    var curve = mainGroup.selectAll('.curve').data(boxes.layers);\n\n    curve.exit().remove();\n\n    curve.enter()\n        .append('path')\n        .attr('d', area)\n        .style('fill', function (d, i) {\n            return color(i);\n        })\n        .attr({\n            \"class\": \"curve\",\n            'fill-opacity': 0,\n            stroke: 'black',\n            'stroke-width': 0,\n            topic: function (d, i) {\n                return topics[i];\n            }\n        });\n\n    curve.attr(\"d\", area)\n        .style('fill', function (d, i) {\n            return color(i);\n        })\n        .attr({\n            'fill-opacity': 0,\n            stroke: 'black',\n            'stroke-width': 0,\n            topic: function (d, i) {\n                return topics[i];\n            }\n        });\n\n\n    var allWords = [];\n    d3.map(boxes.data, function (row) {\n        boxes.topics.forEach(topic => {\n            allWords = allWords.concat(row.words[topic]);\n        });\n    });\n\n    allW = JSON.parse(JSON.stringify(allWords));\n\n    opacity = d3.scale.log()\n        .domain([minSud, maxSud])\n        .range([0.4, 1]);\n\n    var lineScale;\n    if (fileName.indexOf(\"Huffington\") >= 0) {\n        d3.json(\"data/linksHuff2012.json\", function (error, rawLinks) {\n            const threshold = 5;\n            const links = rawLinks.filter(d => d.weight > threshold);\n            var isRel = document.getElementById(\"rel\").checked;\n\n            links.forEach(d => {\n                d.sourceID = d.sourceID.split(\".\").join(\"_\").split(\" \").join(\"_\");\n                d.targetID = d.targetID.split(\".\").join(\"_\").split(\" \").join(\"_\");\n            });\n            let visibleLinks = [];\n\n            // select only links with: word place = true and have same id\n            links.forEach(d => {\n                let s = allWords.find(w => (w.id === d.sourceID) && (w.placed === true));\n                let t = allWords.find(w => (w.id === d.targetID) && (w.placed === true));\n                if ((s !== undefined) && (t !== undefined)) {\n                    visibleLinks.push({\n                        sourceX: s.x,\n                        sourceY: s.y,\n                        targetX: t.x,\n                        targetY: t.y,\n                        weight: d.weight,\n                        sourceID: d.sourceID,\n                        targetID: d.targetID,\n                        id: d.sourceID + \"_\" + d.targetID\n                    });\n                }\n            });\n\n            lineScale = d3.scale.linear()\n                .domain(d3.extent(visibleLinks, d => d.weight))\n                .range([0.5, 3]);\n\n            opacScale = d3.scale.linear()\n                .domain(d3.extent(visibleLinks, d => d.weight))\n                .range([0.5, 1]);\n\n            var connection = mainGroup.selectAll(\".connection\").data(visibleLinks, d => d.id);\n            connection.exit().remove();\n\n            connection.enter()\n                .append(\"line\")\n                .attr(\"class\", \"connection\");\n\n            connection.transition()\n                .duration(800)\n                .attr(\"opacity\", isRel ? 1 : 0)\n                .attr({\n                    \"x1\": d => d.sourceX,\n                    \"y1\": d => d.sourceY,\n                    \"x2\": d => d.targetX,\n                    \"y2\": d => d.targetY,\n                    \"stroke\": \"#444444\",\n                    \"stroke-opacity\": d => opacScale(d.weight),\n                    \"stroke-width\": d => lineScale(d.weight)\n                });\n            drawWords();\n        });\n    } else drawWords();\n\n    function drawWords() {\n        var prevColor;\n\n        var texts = mainGroup.selectAll('.word').data(allWords, d => d.id);\n\n        texts.exit().remove();\n\n        var textEnter = texts.enter().append('g')\n            .attr({\n                transform: function (d) {\n                    return 'translate(' + d.x + ', ' + d.y + ')rotate(' + d.rotate + ')';\n                }\n            })\n            .attr(\"class\", \"word\")\n            .append('text')\n\n        textEnter\n            .text(function (d) {\n                return d.text;\n            })\n            .attr({\n                \"id\": d => d.id,\n                \"class\": \"textData\",\n                'font-family': font,\n                'font-size': function (d) {\n                    return d.fontSize;\n                },\n                \"fill\": function (d, i) {\n                    return color(categories.indexOf(d.topic));\n                },\n                \"fill-opacity\": function (d) {\n                    return opacity(d.sudden);\n                },\n                'text-anchor': 'middle',\n                'alignment-baseline': 'middle',\n                topic: function (d) {\n                    return d.topic;\n                },\n                visibility: function (d) {\n                    return d.placed ? \"visible\" : \"hidden\";\n                }\n            });\n\n        texts.transition().duration(800)\n            .attr({\n                transform: function (d) {\n                    return 'translate(' + d.x + ', ' + d.y + ')rotate(' + d.rotate + ')';\n                }\n            })\n            .select(\"text\")\n            .attr('font-size', function (d) {\n                return d.fontSize;\n            })\n            .attr({\n                visibility: function (d) {\n                    return d.placed ? \"visible\" : \"hidden\";\n                }\n            });\n\n        // texts.style(\"text-decoration\", \"underline\");\n\n        mainGroup.selectAll(\".connection\").on(\"mouseover\", function () {\n            var thisLink = d3.select(this);\n            thisLink.style('cursor', 'crosshair');\n            // in order to select by byid, the id must not have space\n            var sourceText = mainGroup.select(\"#\" + thisLink[0][0].__data__.sourceID);\n            var prevSourceColor = sourceText.attr(\"fill\");\n            var targetText = mainGroup.select(\"#\" + thisLink[0][0].__data__.targetID);\n            var prevTargetColor = targetText.attr(\"fill\");\n\n            thisLink.attr(\"stroke-width\", 4);\n\n            sourceText.attr({\n                stroke: prevSourceColor,\n                fill: prevSourceColor,\n                'stroke-width': 1.5\n            });\n\n            targetText.attr({\n                stroke: prevTargetColor,\n                fill: prevTargetColor,\n                'stroke-width': 1.5\n            });\n        });\n\n        mainGroup.selectAll(\".connection\").on(\"mouseout\", function () {\n            var thisLink = d3.select(this);\n            thisLink.style('cursor', 'crosshair');\n            var sourceText = mainGroup.select(\"#\" + thisLink[0][0].__data__.sourceID);\n            var targetText = mainGroup.select(\"#\" + thisLink[0][0].__data__.targetID);\n\n            thisLink.attr(\"stroke-width\", lineScale(thisLink[0][0].__data__.weight));\n\n            sourceText.attr({\n                stroke: 'none',\n                'stroke-width': 0\n            });\n\n            targetText.attr({\n                stroke: 'none',\n                'stroke-width': 0\n            });\n        });\n\n        //Highlight\n        mainGroup.selectAll('.textData').on('mouseenter', function () {\n            var thisText = d3.select(this);\n            thisText.style('cursor', 'pointer');\n            prevColor = thisText.attr('fill');\n            var text = thisText.text();\n            var topic = thisText.attr('topic');\n            var allTexts = mainGroup.selectAll('.textData').filter(t => {\n                return t && t.text === text && t.topic === topic;\n            });\n            allTexts.attr({\n                stroke: prevColor,\n                'stroke-width': 1\n            });\n        });\n        mainGroup.selectAll('.textData').on('mouseout', function () {\n            var thisText = d3.select(this);\n            thisText.style('cursor', 'default');\n            var text = thisText.text();\n            var topic = thisText.attr('topic');\n            var allTexts = mainGroup.selectAll('.textData').filter(t => {\n                return t && !t.cloned && t.text === text && t.topic === topic;\n            });\n            allTexts.attr({\n                stroke: 'none',\n                'stroke-width': '0'\n            });\n        });\n        //Click\n        mainGroup.selectAll('.textData').on('click', function () {\n            var thisText = d3.select(this);\n            var text = thisText.text();\n            var topic = thisText.attr('topic');\n            var allTexts = mainGroup.selectAll('.textData').filter(t => {\n                return t && t.text === text && t.topic === topic;\n            });\n            //Select the data for the stream layers\n            var streamLayer = d3.select(\"path[topic='\" + topic + \"']\")[0][0].__data__;\n            //Push all points\n            var points = Array();\n            //Initialize all points\n            streamLayer.forEach(elm => {\n                points.push({\n                    x: elm.x,\n                    y0: elm.y0 + elm.y,\n                    y: 0//zero as default\n                });\n            });\n            allTexts[0].forEach(t => {\n                var data = t.__data__;\n                var fontSize = data.fontSize;\n                //The point\n                var thePoint = points[data.timeStep + 1];\n                ;//+1 since we added 1 to the first point and 1 to the last point.\n                thePoint.y = -data.streamHeight;\n                //Set it to visible.\n                //Clone the nodes.\n                var clonedNode = t.cloneNode(true);\n                d3.select(clonedNode).attr({\n                    visibility: \"visible\",\n                    stroke: 'none',\n                    'stroke-size': 0,\n                });\n                var clonedParentNode = t.parentNode.cloneNode(false);\n                clonedParentNode.appendChild(clonedNode);\n\n                t.parentNode.parentNode.appendChild(clonedParentNode);\n                d3.select(clonedParentNode).attr({\n                    cloned: true,\n                    topic: topic\n                }).transition().duration(300).attr({\n                    transform: function (d, i) {\n                        return 'translate(' + thePoint.x + ',' + (thePoint.y0 + thePoint.y - fontSize / 2) + ')';\n                    },\n                });\n            });\n            //Add the first and the last points\n            points[0].y = points[1].y;//First point\n            points[points.length - 1].y = points[points.length - 2].y;//Last point\n            //Append stream\n            wordStreamG.append('path')\n                .datum(points)\n                .attr('d', area)\n                .style('fill', prevColor)\n                .attr({\n                    'fill-opacity': prevColor,\n                    stroke: 'black',\n                    'stroke-width': 0.3,\n                    topic: topic,\n                    wordStream: true\n                });\n            //Hide all other texts\n            var allOtherTexts = mainGroup.selectAll('.textData').filter(t => {\n                return t && !t.cloned && t.topic === topic;\n            });\n            allOtherTexts.attr('visibility', 'hidden');\n        });\n        topics.forEach(topic => {\n            d3.select(\"path[topic='\" + topic + \"']\").on('click', function () {\n                mainGroup.selectAll('.textData').filter(t => {\n                    return t && !t.cloned && t.placed && t.topic === topic;\n                }).attr({\n                    visibility: 'visible'\n                });\n                //Remove the cloned element\n                document.querySelectorAll(\"g[cloned='true'][topic='\" + topic + \"']\").forEach(node => {\n                    node.parentNode.removeChild(node);\n                });\n                //Remove the added path for it\n                document.querySelectorAll(\"path[wordStream='true'][topic='\" + topic + \"']\").forEach(node => {\n                    node.parentNode.removeChild(node);\n                });\n            });\n\n        });\n\n        //Build the legends\n        legendGroup.attr('transform', 'translate(' + margins.left + ',' + (height + margins.top + legendOffset) + ')');\n        var legendNodes = legendGroup.selectAll('g').data(boxes.topics).enter().append('g')\n            .attr('transform', function (d, i) {\n                return 'translate(' + 10 + ',' + (i * legendFontSize) + ')';\n            });\n        legendNodes.append('circle').attr({\n            r: 5,\n            fill: function (d, i) {\n                return color(i);\n            },\n            'fill-opacity': 1,\n            stroke: 'black',\n            'stroke-width': .5,\n        });\n        legendNodes.append('text').text(function (d) {\n            return d;\n        }).attr({\n            'font-size': legendFontSize,\n            'alignment-baseline': 'middle',\n            dx: 8\n        });\n        spinner.stop();\n    };\n}\n\nfunction styleAxis(axisNodes) {\n    axisNodes.selectAll('.domain').attr({\n        fill: 'none'\n    });\n    axisNodes.selectAll('.tick line').attr({\n        fill: 'none',\n    });\n    axisNodes.selectAll('.tick text').attr({\n        'font-family': 'serif',\n        'font-size': 15\n    });\n}\n\nfunction styleGridlineNodes(gridlineNodes) {\n    gridlineNodes.selectAll('.domain').attr({\n        fill: 'none',\n        stroke: 'none'\n    });\n    gridlineNodes.selectAll('.tick line').attr({\n        fill: 'none',\n        'stroke-width': 0.7,\n        stroke: 'lightgray'\n    });\n}\n"]}